#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * Script de instala√ß√£o para preparar o projeto ap√≥s clonagem/uso via Laravel Installer.
 *
 * Passos:
 * - Verifica e instala automaticamente: PHP 8.4, extens√µes PHP, Composer
 * - Remove Apache2 se instalado (conflito com Nginx do Sail)
 * - Orienta instala√ß√£o manual de: Node.js e Docker
 * - Configura permiss√µes Docker automaticamente
 * - Cria .env a partir de .env.example (se necess√°rio)
 * - Executa composer install para gerar vendor/bin/sail
 * - Inicia containers Sail
 * - Executa migrations e seeders
 * - Instala depend√™ncias NPM e build dos assets
 */
$basePath = __DIR__;

/**
 * Executa um comando e exibe o resultado.
 */
function run(string $command): void
{
    echo "\n> {$command}\n";

    $exitCode = 0;
    passthru($command, $exitCode);

    if ($exitCode !== 0) {
        echo "\nComando falhou com c√≥digo {$exitCode}. Abortando.\n";
        exit($exitCode);
    }
}

/**
 * Verifica se um comando est√° dispon√≠vel no PATH atual.
 */
function commandExists(string $command): bool
{
    $which = shell_exec(sprintf('command -v %s 2>/dev/null', escapeshellarg($command)));

    return is_string($which) && trim($which) !== '';
}

/**
 * Verifica se PHP 8.4+ est√° instalado.
 */
function checkPhpVersion(): bool
{
    if (! commandExists('php')) {
        return false;
    }

    $version = shell_exec('php -v');
    if (! is_string($version)) {
        return false;
    }

    // Extrair vers√£o do PHP
    if (preg_match('/PHP (\d+\.\d+)/', $version, $matches)) {
        $versionNumber = (float) $matches[1];

        return $versionNumber >= 8.4;
    }

    return false;
}

/**
 * Instala PHP 8.4 automaticamente.
 */
function installPhp84(): void
{
    echo "üì• Instalando PHP 8.4 automaticamente...\n";

    // Instalar software-properties-common
    run('sudo apt install software-properties-common -y');

    // Adicionar PPA do Ondrej
    run('LC_ALL=C.UTF-8 sudo add-apt-repository ppa:ondrej/php -y');

    // Atualizar pacotes
    run('sudo apt update');

    // Instalar PHP 8.4
    run('sudo apt install php8.4 php8.4-cli php8.4-fpm -y');

    echo "‚úÖ PHP 8.4 instalado com sucesso!\n";
}

/**
 * Verifica se todas as extens√µes PHP necess√°rias est√£o instaladas.
 */
function checkPhpExtensions(): array
{
    $requiredExtensions = [
        // Essenciais do Laravel
        'mbstring', 'xml', 'pdo', 'tokenizer', 'openssl', 'fileinfo',
        'ctype', 'json', 'bcmath', 'curl',
        // Imagens/Arquivos
        'gd', 'zip',
        // XML/DOM
        'dom', 'xmlwriter', 'xmlreader', 'simplexml',
        // Bancos de dados
        'pgsql', 'sqlite3',
        // Recomendadas
        'tidy', 'intl',
    ];

    $installedExtensions = [];
    $missingExtensions = [];

    foreach ($requiredExtensions as $extension) {
        $output = shell_exec("php -m | grep -i '^{$extension}$'");
        if (is_string($output) && trim($output) === $extension) {
            $installedExtensions[] = $extension;
        } else {
            $missingExtensions[] = $extension;
        }
    }

    return [
        'installed' => $installedExtensions,
        'missing' => $missingExtensions,
    ];
}

/**
 * Instala extens√µes PHP faltantes automaticamente.
 */
function installPhpExtensions(array $missingExtensions): void
{
    if (empty($missingExtensions)) {
        echo "‚úÖ Todas as extens√µes PHP necess√°rias j√° est√£o instaladas.\n";

        return;
    }

    echo 'üì• Instalando extens√µes PHP faltantes: '.implode(', ', $missingExtensions)."\n";

    $extensionPackages = [];
    foreach ($missingExtensions as $extension) {
        $extensionPackages[] = "php8.4-{$extension}";
    }

    $command = 'sudo apt install '.implode(' ', $extensionPackages).' -y';
    run($command);

    echo "‚úÖ Extens√µes PHP instaladas com sucesso!\n";
}

/**
 * Verifica se Composer est√° instalado.
 */
function checkComposer(): bool
{
    return commandExists('composer');
}

/**
 * Instala Composer automaticamente.
 */
function installComposer(): void
{
    echo "üì• Instalando Composer automaticamente...\n";

    // Baixar o instalador
    run('php -r "copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');"');

    // Executar instalador (sem verifica√ß√£o de hash por simplicidade)
    run('sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer');

    // Remover instalador
    run('php -r "unlink(\'composer-setup.php\');"');

    echo "‚úÖ Composer instalado com sucesso!\n";
}

/**
 * Verifica se Node.js 18+ e NPM est√£o instalados.
 */
function checkNodeNpm(): bool
{
    if (! commandExists('node') || ! commandExists('npm')) {
        return false;
    }

    $nodeVersion = shell_exec('node --version');
    if (! is_string($nodeVersion)) {
        return false;
    }

    // Extrair vers√£o do Node.js
    if (preg_match('/v(\d+)/', $nodeVersion, $matches)) {
        $versionNumber = (int) $matches[1];

        return $versionNumber >= 18;
    }

    return false;
}

/**
 * Verifica se Docker est√° instalado.
 */
function checkDocker(): bool
{
    return commandExists('docker');
}

/**
 * Verifica se Docker est√° rodando.
 */
function checkDockerRunning(): bool
{
    if (! checkDocker()) {
        return false;
    }

    $output = shell_exec('docker ps 2>/dev/null');

    return is_string($output) && ! empty(trim($output));
}

/**
 * Verifica se Docker Compose v2+ est√° dispon√≠vel.
 */
function checkDockerCompose(): bool
{
    if (! commandExists('docker')) {
        return false;
    }

    $output = shell_exec('docker compose version 2>/dev/null');
    if (! is_string($output)) {
        return false;
    }

    // Verificar se √© vers√£o 2+
    return str_contains($output, 'v2') || str_contains($output, '2.');
}

/**
 * Verifica se Apache2 est√° instalado.
 */
function checkApache2(): bool
{
    $output = shell_exec('dpkg -l | grep apache2');

    return is_string($output) && ! empty(trim($output));
}

/**
 * Verifica se Apache2 est√° ativo e rodando.
 */
function checkApache2Running(): bool
{
    if (! checkApache2()) {
        return false;
    }

    $output = shell_exec('systemctl is-active apache2 2>/dev/null');

    // Se o comando falhar ou retornar erro, considerar como n√£o rodando
    if (! is_string($output)) {
        return false;
    }

    $status = trim($output);

    // Considerar como rodando apenas se o status for 'active'
    return $status === 'active';
}

/**
 * Remove Apache2 automaticamente.
 */
function removeApache2(): void
{
    echo "‚ö†Ô∏è  Removendo Apache2 (conflita com Nginx usado pelo Sail)...\n";

    // Se estiver rodando, parar primeiro
    if (checkApache2Running()) {
        echo "üõë Parando servi√ßo Apache2...\n";
        shell_exec('sudo systemctl stop apache2 2>/dev/null');
    }

    // Desabilitar o servi√ßo (ignorar erro se n√£o existir)
    echo "üö´ Desabilitando servi√ßo Apache2...\n";
    shell_exec('sudo systemctl disable apache2 2>/dev/null');

    // Remover completamente
    echo "üóëÔ∏è  Removendo pacotes Apache2...\n";
    shell_exec('sudo apt remove --purge apache2 apache2-utils apache2-bin -y 2>/dev/null');

    // Limpar depend√™ncias
    echo "üßπ Limpando depend√™ncias...\n";
    shell_exec('sudo apt autoremove -y 2>/dev/null');

    echo "‚úÖ Apache2 removido com sucesso!\n";
}

/**
 * Configura permiss√µes Docker automaticamente.
 */
function configureDockerPermissions(): void
{
    echo "‚öôÔ∏è  Configurando permiss√µes Docker...\n";

    // Verificar se usu√°rio est√° no grupo docker
    $groups = shell_exec('groups');
    if (! is_string($groups) || ! str_contains($groups, 'docker')) {
        // Criar grupo docker (ignorar erro se j√° existir)
        shell_exec('sudo groupadd docker 2>/dev/null');

        // Adicionar usu√°rio ao grupo docker
        run('sudo usermod -aG docker $USER');

        echo "‚öôÔ∏è  Usu√°rio adicionado ao grupo docker.\n";
        echo "IMPORTANTE: Voc√™ precisa fazer logout e login novamente (ou reiniciar)\n";
        echo "para que as mudan√ßas tenham efeito.\n";
        echo "Alternativamente, execute: newgrp docker\n";

        // Tentar ativar com newgrp
        shell_exec('newgrp docker');
    } else {
        echo "‚úÖ Usu√°rio j√° est√° no grupo docker.\n";
    }

    // Verificar se Docker est√° rodando
    if (! checkDockerRunning()) {
        echo "‚öôÔ∏è  Tentando iniciar o daemon Docker...\n";

        // Tentar iniciar com systemctl
        shell_exec('sudo systemctl start docker 2>/dev/null');

        // Se n√£o funcionar, tentar com service
        if (! checkDockerRunning()) {
            shell_exec('sudo service docker start 2>/dev/null');
        }

        if (checkDockerRunning()) {
            echo "‚úÖ Docker daemon iniciado com sucesso!\n";
        } else {
            echo "‚ö†Ô∏è  N√£o foi poss√≠vel iniciar o Docker daemon automaticamente.\n";
            echo "Por favor, inicie manualmente: sudo systemctl start docker\n";
        }
    } else {
        echo "‚úÖ Docker daemon j√° est√° rodando.\n";
    }
}

/**
 * Exibe mensagem de erro e aborta para depend√™ncias que devem ser instaladas manualmente.
 */
function abortWithInstructions(string $dependency, string $url, string $message): void
{
    echo "\n‚ùå {$dependency} n√£o encontrado!\n\n";
    echo "{$message}\n";
    echo "üîó {$url}\n\n";
    echo "Ap√≥s a instala√ß√£o, execute este script novamente.\n";
    exit(1);
}

/**
 * Cria arquivo .env a partir de .env.example se n√£o existir.
 */
function createEnvFile(string $basePath): void
{
    $envPath = $basePath.'/.env';
    $envExamplePath = $basePath.'/.env.example';

    if (! file_exists($envPath) && file_exists($envExamplePath)) {
        if (! copy($envExamplePath, $envPath)) {
            echo "‚ùå Arquivo .env n√£o p√¥de ser criado a partir de .env.example\n";
            exit(1);
        }

        echo "‚úÖ Arquivo .env criado a partir de .env.example\n";
    }
}

/**
 * Executa a instala√ß√£o via Sail.
 */
function runSailInstallation(string $basePath): void
{
    echo "\nüì¶ Iniciando instala√ß√£o via Sail...\n";

    // 1. Criar .env
    createEnvFile($basePath);

    // 2. Instalar depend√™ncias Composer primeiro (necess√°rio para gerar vendor/bin/sail)
    echo "üì¶ Instalando depend√™ncias Composer...\n";
    run('composer install --no-interaction --prefer-dist');

    // 3. Iniciar containers Sail
    echo "üöÄ Iniciando containers Sail...\n";
    run('./vendor/bin/sail up -d');

    // 4. Aguardar containers iniciarem
    echo "‚è≥ Aguardando containers iniciarem...\n";
    sleep(10); // Aguardar 10 segundos para containers iniciarem

    // Verificar se containers est√£o rodando
    $containers = shell_exec('docker ps | grep laravel');
    if (! is_string($containers) || empty(trim($containers))) {
        echo "‚ùå Containers Sail n√£o est√£o rodando. Verifique os logs: ./vendor/bin/sail logs\n";
        exit(1);
    }

    echo "‚úÖ Containers Sail iniciados com sucesso!\n";

    // 5. Gerar APP_KEY se n√£o existir
    $envContent = file_exists('.env') ? file_get_contents('.env') : '';
    $hasKey = (bool) preg_match('/^APP_KEY=.+/m', $envContent);

    if (! $hasKey) {
        echo "üîë Gerando APP_KEY...\n";
        run('./vendor/bin/sail artisan key:generate');
    }

    // 6. Criar link de storage
    echo "üîó Criando link de storage...\n";
    run('./vendor/bin/sail artisan storage:link');

    // 7. Executar reset.sh para finalizar a instala√ß√£o
    echo "üîÑ Executando script de reset para finalizar instala√ß√£o...\n";
    run('./reset.sh --install');

    echo "‚úÖ Instala√ß√£o via Sail conclu√≠da com sucesso!\n";
}

/**
 * Exibe resumo final com informa√ß√µes importantes.
 */
function showFinalSummary(): void
{
    echo "\n".str_repeat('=', 60)."\n";
    echo "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!\n";
    echo str_repeat('=', 60)."\n\n";

    echo "üîê CREDENCIAIS DE ACESSO:\n";
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    echo "‚îÇ Admin (Escopo Global):                                  ‚îÇ\n";
    echo "‚îÇ   Email: admin@labsis.dev.br                            ‚îÇ\n";
    echo "‚îÇ   Senha: mudar123                                       ‚îÇ\n";
    echo "‚îÇ   Painel: http://localhost/admin                        ‚îÇ\n";
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    echo "‚îÇ Sicrano (Tenant A - Owner, Tenant B - User):            ‚îÇ\n";
    echo "‚îÇ   Email: sicrano@labsis.dev.br                          ‚îÇ\n";
    echo "‚îÇ   Senha: mudar123                                       ‚îÇ\n";
    echo "‚îÇ   Painel: http://localhost/user                          ‚îÇ\n";
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    echo "‚îÇ Beltrano (Tenant A - User, Tenant B - Owner):           ‚îÇ\n";
    echo "‚îÇ   Email: beltrano@labsis.dev.br                        ‚îÇ\n";
    echo "‚îÇ   Senha: mudar123                                       ‚îÇ\n";
    echo "‚îÇ   Painel: http://localhost/user                          ‚îÇ\n";
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";

    echo "üõ†Ô∏è  COMANDOS √öTEIS:\n";
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    echo "‚îÇ Parar containers:     ./vendor/bin/sail down           ‚îÇ\n";
    echo "‚îÇ Iniciar containers:   ./vendor/bin/sail up -d           ‚îÇ\n";
    echo "‚îÇ Ver logs:             ./vendor/bin/sail logs -f         ‚îÇ\n";
    echo "‚îÇ Executar comando:     ./vendor/bin/sail artisan [cmd]   ‚îÇ\n";
    echo "‚îÇ Shell do container:   ./vendor/bin/sail shell           ‚îÇ\n";
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";

    echo "üåê ACESSO √ÄS APLICA√á√ïES:\n";
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    echo "‚îÇ Painel Admin:         http://localhost/admin            ‚îÇ\n";
    echo "‚îÇ Painel Usu√°rio:       http://localhost/user             ‚îÇ\n";
    echo "‚îÇ Website/Landing:      http://localhost                  ‚îÇ\n";
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";

    echo "üìö DOCUMENTA√á√ÉO:\n";
    echo "Toda a documenta√ß√£o est√° dispon√≠vel na pasta /docs\n";
    echo "Recomendamos a leitura para entender os recursos implementados.\n\n";

    echo "‚ú® Aproveite o LabSIS KIT!\n";
}

// ============================================================================
// EXECU√á√ÉO PRINCIPAL
// ============================================================================

echo "üöÄ LabSIS KIT - Script de Instala√ß√£o\n";
echo str_repeat('=', 50)."\n";

// 1. Verifica√ß√£o e instala√ß√£o do PHP 8.4
echo "\nüîç Verificando PHP 8.4...\n";
if (! checkPhpVersion()) {
    installPhp84();
} else {
    echo "‚úÖ PHP 8.4+ j√° est√° instalado.\n";
}

// 2. Verifica√ß√£o e instala√ß√£o das extens√µes PHP
echo "\nüîç Verificando extens√µes PHP...\n";
$extensions = checkPhpExtensions();
if (! empty($extensions['missing'])) {
    installPhpExtensions($extensions['missing']);
} else {
    echo "‚úÖ Todas as extens√µes PHP necess√°rias est√£o instaladas.\n";
}

// 3. Verifica√ß√£o e instala√ß√£o do Composer
echo "\nüîç Verificando Composer...\n";
if (! checkComposer()) {
    installComposer();
} else {
    echo "‚úÖ Composer j√° est√° instalado.\n";
}

// 4. Verifica√ß√£o do Node.js e NPM (apenas orienta√ß√£o)
echo "\nüîç Verificando Node.js e NPM...\n";
if (! checkNodeNpm()) {
    abortWithInstructions(
        'Node.js 18+',
        'https://nodejs.org/',
        'Por favor, instale o Node.js a partir da documenta√ß√£o oficial:'
    );
} else {
    echo "‚úÖ Node.js 18+ e NPM j√° est√£o instalados.\n";
}

// 5. Verifica√ß√£o do Docker (apenas orienta√ß√£o)
echo "\nüîç Verificando Docker...\n";
if (! checkDocker()) {
    abortWithInstructions(
        'Docker',
        'https://docs.docker.com/engine/install/ubuntu/',
        'Por favor, instale o Docker a partir da documenta√ß√£o oficial:'
    );
} else {
    echo "‚úÖ Docker j√° est√° instalado.\n";
}

// 6. Verifica√ß√£o do Docker Compose v2+ (apenas orienta√ß√£o)
echo "\nüîç Verificando Docker Compose v2+...\n";
if (! checkDockerCompose()) {
    abortWithInstructions(
        'Docker Compose v2+',
        'https://docs.docker.com/compose/install/',
        'Por favor, atualize o Docker Compose para vers√£o 2.0 ou superior:'
    );
} else {
    echo "‚úÖ Docker Compose v2+ j√° est√° dispon√≠vel.\n";
}

// 7. Verifica√ß√£o e remo√ß√£o do Apache2
echo "\nüîç Verificando Apache2...\n";
if (checkApache2()) {
    if (checkApache2Running()) {
        echo "‚ö†Ô∏è  Apache2 est√° instalado e rodando (conflita com Nginx do Sail)\n";
    } else {
        echo "‚ö†Ô∏è  Apache2 est√° instalado mas n√£o est√° rodando (conflita com Nginx do Sail)\n";
    }
    removeApache2();
} else {
    echo "‚úÖ Apache2 n√£o est√° instalado.\n";
}

// 8. Configura√ß√£o das permiss√µes Docker
echo "\n‚öôÔ∏è  Configurando Docker...\n";
configureDockerPermissions();

// 9. Instala√ß√£o via Sail
runSailInstallation($basePath);

// 10. Resumo final
showFinalSummary();
